//==================================================================================================================
//
// 棒の描画 [bar.cpp]
// Author : Seiya Takahashi
//
//==================================================================================================================
#define _CRT_SECURE_NO_WARNINGS

//==================================================================================================================
//	インクルードファイル
//==================================================================================================================
#include <stdio.h>
#include <stdlib.h>
#include "renderer.h"
#include "manager.h"
#include "bar.h"

//==================================================================================================================
//	マクロ定義
//==================================================================================================================
#define SizeX 500			// 横のサイズ
#define SizeY 60			// 縦のサイズ

//==================================================================================================================
//	静的メンバ変数宣言
//==================================================================================================================
LPDIRECT3DTEXTURE9 CBar::m_pTexture[TEXTURE_BAR] = {};				// テクスチャ情報

//==================================================================================================================
//	コンストラクタ
//==================================================================================================================
CBar::CBar()
{

}

//==================================================================================================================
//	デストラクタ
//==================================================================================================================
CBar::~CBar(void)
{

}

//==================================================================================================================
//	初期化処理
//==================================================================================================================
void CBar::Init(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();					// デバイスを取得する

	//　初期化
	m_pos = D3DXVECTOR3(0, 0, 0);		// 位置

	// 頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4 * TEXTURE_BAR,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);
}

//==================================================================================================================
//	終了処理
//==================================================================================================================
void CBar::Uninit(void)
{
	// 頂点バッファがあるとき
	if (m_pVtxBuff != NULL)
	{
		m_pVtxBuff->Release();	// 頂点バッファの開放
		m_pVtxBuff = NULL;		// NULLにする
	}
}

//==================================================================================================================
//	更新処理
//==================================================================================================================
void CBar::Update(void)
{

}

//==================================================================================================================
//	描画処理
//==================================================================================================================
void CBar::Draw(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();						// レンダラーの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();					// デバイスを取得する

	// 頂点バッファをデバイスのデータストリームにバインド
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_2D));

	// 頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);

	// テクスチャの最大数までカウント
	for (int nCntTex = 0; nCntTex < TEXTURE_BAR; nCntTex++)
	{
		// テクスチャの設定
		pDevice->SetTexture(0, m_pTexture[nCntTex]);

		// ポリゴン描画
		pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, nCntTex * 4, 2);
	}
}

//==================================================================================================================
// オブジェクトの生成
//==================================================================================================================
CBar *CBar::Create(void)
{
	CBar *pBar = NULL;			// 変数初期化

	pBar = new CBar;			// メモリを動的に確保

	pBar->Init();				// 初期化処理

	return pBar;				// 値を返す
}

//==================================================================================================================
// テクスチャ情報ロード
//==================================================================================================================
HRESULT CBar::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();						// レンダラーの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();					// デバイスを取得する

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,									// デバイスへのポインタ
		"data/TEXTURE/HPframe.png",										// ファイルの名前
		&m_pTexture[1]);												// 読み込むメモリー

	D3DXCreateTextureFromFile(pDevice,									// デバイスへのポインタ
		"data/TEXTURE/HPbar.png",										// ファイルの名前
		&m_pTexture[0]);												// 読み込むメモリー

	// 値を返す
	return S_OK;
}

//==================================================================================================================
// テクスチャ情報破棄
//==================================================================================================================
void CBar::Unload(void)
{
	// テクスチャの最大数までカウント
	for (int nCntTex = 0; nCntTex < TEXTURE_BAR; nCntTex++)
	{
		// テクスチャがあるとき
		if (m_pTexture[nCntTex] != NULL)
		{
			m_pTexture[nCntTex]->Release();		// テクスチャの開放
			m_pTexture[nCntTex] = NULL;			// NULLにする
		}
	}
}

//==================================================================================================================
// 頂点の設定
//==================================================================================================================
void CBar::SetVertexBar(int index, D3DXVECTOR3 pos, D3DXCOLOR col, float fWidth, float fHeight)
{
	VERTEX_2D *pVtx; // 頂点情報へのポインタ

	// 頂点データの範囲をロックし、頂点バッファへのポインタ取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	pVtx += index * 4;					// 頂点を4つずつ加算

	// 頂点座標の設定(右回りで設定する)
	pVtx[0].pos.x = pos.x;
	pVtx[0].pos.y = pos.y;
	pVtx[0].pos.z = 0.0f;

	pVtx[1].pos.x = pos.x + fWidth;
	pVtx[1].pos.y = pos.y;
	pVtx[1].pos.z = 0.0f;

	pVtx[2].pos.x = pos.x;
	pVtx[2].pos.y = pos.y + fHeight;
	pVtx[2].pos.z = 0.0f;

	pVtx[3].pos.x = pos.x + fWidth;
	pVtx[3].pos.y = pos.y + fHeight;
	pVtx[3].pos.z = 0.0f;

	// 同次座標(1.0で固定)
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	// 色の設定
	pVtx[0].col = D3DXCOLOR(col.r, col.g, col.b, col.a);
	pVtx[1].col = D3DXCOLOR(col.r, col.g, col.b, col.a);
	pVtx[2].col = D3DXCOLOR(col.r, col.g, col.b, col.a);
	pVtx[3].col = D3DXCOLOR(col.r, col.g, col.b, col.a);

	// テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	// 頂点データをアンロック
	m_pVtxBuff->Unlock();

}
